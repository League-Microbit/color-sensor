{"entries":[{"timestamp":1754359974104,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":184,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":33,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":118,"length1":87,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":208,"length1":41,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":235,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"custom.ts","value":"\n\nclass tcs3472 {\n    is_setup: boolean\n    addr: number\n    leds: DigitalPin\n\n    constructor(addr: number, leds: DigitalPin = DigitalPin.P8) {\n        this.is_setup = false\n        this.addr = addr\n        this.leds = leds\n    }\n\n    setup(): void {\n        if (this.is_setup) return\n        this.is_setup = true\n        smbus.writeByte(this.addr, 0x80, 0x03)\n        smbus.writeByte(this.addr, 0x81, 0x2b)\n    }\n\n    setIntegrationTime(time: number): void {\n        this.setup()\n        time = Math.clamp(0, 255, time * 10 / 24)\n        smbus.writeByte(this.addr, 0x81, 255 - time)\n    }\n\n    setLEDs(state: number): void {\n        pins.digitalWritePin(this.leds, state)\n    }\n\n    light(): number {\n        return this.raw()[0]\n    }\n\n    rgb(): number[] {\n        let result: number[] = this.raw()\n        let clear: number = result.shift()\n        for (let x: number = 0; x < result.length; x++) {\n            result[x] = result[x] * 255 / clear\n        }\n        return result\n    }\n\n    raw(): number[] {\n        this.setup()\n        let result: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)\n        return smbus.unpack(\"HHHH\", result)\n    }\n}\n\n\nlet c = new tcs3472(0x29, DigitalPin.P16);\nc.setup()\nc.setIntegrationTime(100)\nc.setLEDs(1);\nbasic.forever(function () {\n    let r = c.rgb()\n    let l = c.light()\n    let n = (r[0]+r[1]+r[2])/3\n    //serial.writeValue('l', l)\n    //serial.writeValue('n', n)\n    serial.writeValue('R', r[0]/n)\n    serial.writeValue(\"G\", r[1]/n)\n    serial.writeValue(\"B\", r[2]/n)\n})\n"}]},{"timestamp":1755384733530,"editorVersion":"8.0.15","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":317,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1755384768655,"editorVersion":"8.0.15","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"553\" y=\"-85\"></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]}]},{"timestamp":1755441255056,"editorVersion":"8.0.15","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":317,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1754359974103,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Color Sensor\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1754365629856,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"553\" y=\"-85\"></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n\nclass tcs3472 {\n    is_setup: boolean\n    addr: number\n    leds: DigitalPin\n\n    constructor(addr: number, leds: DigitalPin = DigitalPin.P8) {\n        this.is_setup = false\n        this.addr = addr\n        this.leds = leds\n    }\n\n    setup(): void {\n        if (this.is_setup) return\n        this.is_setup = true\n        smbus.writeByte(this.addr, 0x80, 0x03)\n        smbus.writeByte(this.addr, 0x81, 0x2b)\n    }\n\n    setIntegrationTime(time: number): void {\n        this.setup()\n        time = Math.clamp(0, 255, time * 10 / 24)\n        smbus.writeByte(this.addr, 0x81, 255 - time)\n    }\n\n    setLEDs(state: number): void {\n        pins.digitalWritePin(this.leds, state)\n    }\n\n    light(): number {\n        return this.raw()[0]\n    }\n\n    rgb(): number[] {\n        let result: number[] = this.raw()\n        let clear: number = result.shift()\n        for (let x: number = 0; x < result.length; x++) {\n            result[x] = result[x] * 255 / clear\n        }\n        return result\n    }\n\n    raw(): number[] {\n        this.setup()\n        let result: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)\n        return smbus.unpack(\"HHHH\", result)\n    }\n}\n\n\nlet c = new tcs3472(0x29, DigitalPin.P16);\nc.setup()\nc.setIntegrationTime(100)\nc.setLEDs(1);\nbasic.forever(function () {\n    let r = c.rgb()\n    let l = c.light()\n    let n = (r[0]+r[1]+r[2])\n    serial.writeValue('R', r[0]/l/n*100000)\n    serial.writeValue(\"G\", r[1]/l/n*100000)\n    serial.writeValue(\"B\", r[2]/l/n*100000)\n})\n","pxt.json":"{\n    \"name\": \"Color Sensor\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"envirobit\": \"github:pimoroni/pxt-envirobit#v0.0.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1755384733530,"editorVersion":"8.0.15","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"553\" y=\"-85\"></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n\nclass tcs3472 {\n    is_setup: boolean\n    addr: number\n    leds: DigitalPin\n\n    constructor(addr: number, leds: DigitalPin = DigitalPin.P8) {\n        this.is_setup = false\n        this.addr = addr\n        this.leds = leds\n    }\n\n    setup(): void {\n        if (this.is_setup) return\n        this.is_setup = true\n        smbus.writeByte(this.addr, 0x80, 0x03)\n        smbus.writeByte(this.addr, 0x81, 0x2b)\n    }\n\n    setIntegrationTime(time: number): void {\n        this.setup()\n        time = Math.clamp(0, 255, time * 10 / 24)\n        smbus.writeByte(this.addr, 0x81, 255 - time)\n    }\n\n    setLEDs(state: number): void {\n        pins.digitalWritePin(this.leds, state)\n    }\n\n    light(): number {\n        return this.raw()[0]\n    }\n\n    rgb(): number[] {\n        let result: number[] = this.raw()\n        let clear: number = result.shift()\n        for (let x: number = 0; x < result.length; x++) {\n            result[x] = result[x] * 255 / clear\n        }\n        return result\n    }\n\n    raw(): number[] {\n        this.setup()\n        let result: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)\n        return smbus.unpack(\"HHHH\", result)\n    }\n}\n\n\nlet c = new tcs3472(0x29, DigitalPin.P16);\nc.setup()\nc.setIntegrationTime(100)\nc.setLEDs(1);\nbasic.forever(function () {\n    let r = c.rgb()\n    let l = c.light()\n    let n = (r[0]+r[1]+r[2])/3\n    //serial.writeValue('l', l)\n    //serial.writeValue('n', n)\n    serial.writeValue('R', r[0]/n)\n    serial.writeValue(\"G\", r[1]/n)\n    serial.writeValue(\"B\", r[2]/n)\n})\n","pxt.json":"{\n    \"name\": \"Color Sensor\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"envirobit\": \"github:pimoroni/pxt-envirobit#v0.0.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1755441255056,"editorVersion":"8.0.15","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"553\" y=\"-85\"></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","custom.ts":"\n\nclass tcs3472 {\n    is_setup: boolean\n    addr: number\n    leds: DigitalPin\n\n    constructor(addr: number, leds: DigitalPin = DigitalPin.P8) {\n        this.is_setup = false\n        this.addr = addr\n        this.leds = leds\n    }\n\n    setup(): void {\n        if (this.is_setup) return\n        this.is_setup = true\n        smbus.writeByte(this.addr, 0x80, 0x03)\n        smbus.writeByte(this.addr, 0x81, 0x2b)\n    }\n\n    setIntegrationTime(time: number): void {\n        this.setup()\n        time = Math.clamp(0, 255, time * 10 / 24)\n        smbus.writeByte(this.addr, 0x81, 255 - time)\n    }\n\n    setLEDs(state: number): void {\n        pins.digitalWritePin(this.leds, state)\n    }\n\n    light(): number {\n        return this.raw()[0]\n    }\n\n    rgb(): number[] {\n        let result: number[] = this.raw()\n        let clear: number = result.shift()\n        for (let x: number = 0; x < result.length; x++) {\n            result[x] = result[x] * 255 / clear\n        }\n        return result\n    }\n\n    raw(): number[] {\n        this.setup()\n        let result: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)\n        return smbus.unpack(\"HHHH\", result)\n    }\n}\n\n\nlet c = new tcs3472(0x29, DigitalPin.P16);\nc.setup()\nc.setIntegrationTime(100)\nc.setLEDs(1);\nbasic.forever(function () {\n    let r = c.rgb()\n    let l = c.light()\n    let n = (r[0]+r[1]+r[2])/3\n    //serial.writeValue('l', l)\n    //serial.writeValue('n', n)\n    serial.writeValue('R', r[0]/n)\n    serial.writeValue(\"G\", r[1]/n)\n    serial.writeValue(\"B\", r[2]/n)\n})\n","pxt.json":"{\n    \"name\": \"Color Sensor\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"envirobit\": \"github:pimoroni/pxt-envirobit#v0.0.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1755441255061}